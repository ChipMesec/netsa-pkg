/*
** Copyright (C) 2014-2017 by Carnegie Mellon University.
**
** @OPENSOURCE_LICENSE_START@
** See license information in ../../LICENSE.txt
** @OPENSOURCE_LICENSE_END@
*/
#ifndef _IPFIXCERT_H
#define _IPFIXCERT_H
#ifdef __cplusplus
extern "C" {
#endif

#include <silk/silk.h>

RCSIDENTVAR(rcsID_IPFIXCERT_H, "$SiLK: skipfixcert.h efd886457770 2017-06-21 18:43:23Z mthomas $");

/*
**  skipfixcert.h
**
*/

#include <silk/skfixbuf.h>


/* The IPFIX Private Enterprise Number for CERT */
#define IPFIX_CERT_PEN  6871

/**
 *    Specifying this flag to skipfix_information_model_create()
 *    creates a new information model that is not shared with any
 *    other caller of that function.
 */
#define SK_INFOMODEL_UNIQUE     0x00000001


/**
 *    Add CERT-specific information elements used by SiLK to the
 *    given information model.
 */
void
skipfixCERTAugmentInfoModel(
    fbInfoModel_t      *model);

/**
 *    Return an IPFIX information model.  The returned model contains
 *    the CERT-specific information elements.
 *
 *    Unless the proper value is included in the 'flags' parameter, a
 *    single (reference counted) info model is shared by all callers
 *    of this function.
 *
 *    The following flags values are available:
 *
 *    SK_INFOMODEL_UNIQUE -- Create a new information model that is
 *    not shared with any other caller of this function.
 */
fbInfoModel_t *
skipfix_information_model_create(
    unsigned int        flags);

/**
 *    Possibly destroy the information model 'model'.  Does nothing if
 *    'model' is NULL.  If 'model' is the shared information model,
 *    the reference count for the model is decremented, and the model
 *    is only destroyed if the reference count is 0.
 */
void
skipfix_information_model_destroy(
    fbInfoModel_t      *model);


/**
 *    A flag that may be passed to skipfix_initialize().  This flag
 *    causes g_log() messages to be written using skAppPrintErr().
 */
#define  SKIPFIX_INITIALIZE_FLAG_APPERROR   (1 << 0)

/**
 *    A flag that may be passed to skipfix_initialize().  This flag
 *    causes g_log() messages to be written using the facilities in
 *    sklog().
 */
#define  SKIPFIX_INITIALIZE_FLAG_LOG        (1 << 1)

/**
 *    Perform any GLib initialization, such as ensuring that it
 *    supports threading.
 *
 *    It is safe to call this function multiple times with later calls
 *    enabling additional features.
 *
 *    If this is the initial call to this function or if the 'flags'
 *    parameter includes SKIPFIX_INITIALIZE_FLAG_APPERROR, then a
 *    callback will be registered for handing messages generated by
 *    GLib that writes those messages using skAppPrintErr().
 *
 *    If the 'flags' parameter includes SKIPFIX_INITIALIZE_FLAG_LOG,
 *    then a callback will be registered for handing messages
 *    generated by GLib that writes those messages using sklog().
 *
 *    SKIPFIX_INITIALIZE_FLAG_LOG takes precedence over
 *    SKIPFIX_INITIALIZE_FLAG_APPERROR when both are set in the same
 *    call to this function.
 *
 *    This function will initialize the GLib slice allocator.  Since
 *    there is no way to de-initialize the slice allocator, valgrind
 *    will report this memory as "still-reachable".  We would rather
 *    have this "still-reachable" memory reported in a well-known
 *    location, instead of hidden somewhere within schema-tools or
 *    fixbuf.
 */
void
skipfix_initialize(
    unsigned int        flags);

#ifdef __cplusplus
}
#endif
#endif /* _IPFIXCERT_H */

/*
** Local Variables:
** mode:c
** indent-tabs-mode:nil
** c-basic-offset:4
** End:
*/
